import re
from django.core.management.base import BaseCommand
from django.db import IntegrityError
from asgiref.sync import sync_to_async
from aiogram.utils import executor
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from ulgc.management.app import dp
from ulgc.management.actions import ACTION_LIST
from ulgc.management.standard_widgets import get_standard_markup, get_first_markup, get_mark_markup
from ulgc.models import Profile
from ulgc.models import ActionWord
from ulgc.models import ActionLesson
from ulgc.models import ActionMaterial


class Command(BaseCommand):
    help = "–¢–µ–ª–µ–≥—Ä–∞–º-–ë–æ—Ç"

    def handle(self, *args, **options):

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        class FSMAdmin(StatesGroup):
            name = State()
            number = State()
            post = State()
            general_question = State()
            action = State()
            word_un = State()
            word_ru = State()
            lesson_date = State()
            lesson_topic = State()
            lesson_mark = State()
            material_name = State()
            material_url = State()
            material_mark = State()

        @dp.message_handler(commands=["start"])
        async def start_command(message: types.Message):
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏
            markup = get_first_markup()
            await message.reply(text='–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤',
                                reply_markup=markup)

        '''************************ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ **************************'''

        # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"
        @dp.message_handler(lambda message: message.text == "–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")
        async def action_cancel(message: types.Message):
            remove_keyboard = types.ReplyKeyboardRemove()
            await message.answer("–û–∫, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è \U0001F602", reply_markup=remove_keyboard)

        @dp.message_handler(lambda message: message.text not in ["–ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–∞—Ç—å!"])
        async def get_weather(message: types.Message):
            await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏. –û–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, " +
                                 "—Å–ª–µ–≤–∞ –æ—Ç –∑–Ω–∞—á–∫–∞ üé§\n")

        '''************************ –ê–Ω–∫–µ—Ç–∞ **************************'''

        @dp.message_handler(lambda message: message.text == "–ù–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–∞—Ç—å!")
        async def cm_start(message: types.Message):
            await FSMAdmin.name.set()
            remove_keyboard = types.ReplyKeyboardRemove()
            await message.answer('–°—É–ø–µ—Ä! –°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è ‚úåÔ∏è\n–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è', reply_markup=remove_keyboard)

        # –õ–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        @dp.message_handler(state=FSMAdmin.name)
        async def get_name(message: types.Message, state: FSMContext):
            if len(message.text.split()) == 1:
                async with state.proxy() as data:
                    data['name'] = message.text
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
                markup.add(item1)
                await message.answer(
                    "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7xxxxxxxxxx",
                    reply_markup=markup)
                await FSMAdmin.next()
            else:
                await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)")

        # –õ–æ–≤–∏–º —à–µ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        @dp.message_handler(content_types=['contact', 'text'], state=FSMAdmin.number)
        async def get_un_name(message: types.Message, state: FSMContext):
            if message.contact is not None:
                async with state.proxy() as data:
                    data['number'] = message.contact.phone_number
                    data['id'] = message.contact.user_id
                await FSMAdmin.next()
                remove_keyboard = types.ReplyKeyboardRemove()
                await message.answer(text='–∏ –µ—â—ë email pls üòÅ', reply_markup=remove_keyboard)
            elif re.fullmatch(r"\+7\d*", message.text) and len(message.text) == 12:
                async with state.proxy() as data:
                    data['number'] = message.text
                    data['id'] = message.from_id
                await FSMAdmin.next()
                remove_keyboard = types.ReplyKeyboardRemove()
                await message.answer(text='–∏ –µ—â—ë email pls üòÅ', reply_markup=remove_keyboard)
            else:
                await message.answer(
                    text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx."+
                         "\n–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")

        @dp.message_handler(state=FSMAdmin.post)
        async def get_un_name(message: types.Message, state: FSMContext):
            if re.search(r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)+$", message.text):
                async with state.proxy() as data:
                    data['post'] = message.text
                    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
                    try:
                        await sync_to_async(Profile(telegram_id=data['id'],
                                                    name=data['name'],
                                                    telephone=data['number'],
                                                    email=data['post']).save)()
                    except IntegrityError:
                        await message.reply("–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ " +
                                            "–ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –±–æ—Ç")
                    data['telegram_id'] = await sync_to_async(Profile.objects.get)(telegram_id=data['id'])
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–°—É–ø–µ—Ä, –Ω–∞—á–∏–Ω–∞–µ–º!")
                markup.add(item1)
                await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ–±—É—á–µ–Ω–∏—é', reply_markup=markup)
                await FSMAdmin.next()
            else:
                await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –≤–∞—à—É –ø–æ—á—Ç—É.\n–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: example@gmail.com")

        '''*********************** –ù–∞—á–∞–ª–æ ****************************'''

        # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        @dp.message_handler(state=FSMAdmin.general_question)
        async def handle_text(message: types.Message):
            if message.text == "–°—É–ø–µ—Ä, –Ω–∞—á–∏–Ω–∞–µ–º!":
                # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
                markup = get_standard_markup()
                await FSMAdmin.action.set()
                await message.answer(text='–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=markup)
            else:
                await message.reply(text="–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏\n" +
                                         "–ö–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–ª–µ–≤–∞ –æ—Ç –∑–Ω–∞—á–∫–∞ üé§")

        # –û—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @dp.message_handler(lambda message: message.text not in ACTION_LIST, state=FSMAdmin.action)
        async def get_w(message: types.Message):
            await message.answer("–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.\n–û–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, " +
                                 "—Å–ª–µ–≤–∞ –æ—Ç –∑–Ω–∞—á–∫–∞ üé§\n")

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        @dp.message_handler(lambda message: message.text == "–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", state=FSMAdmin.action)
        async def handle_text(message: types.Message):
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            remove_keyboard = types.ReplyKeyboardRemove()
            await FSMAdmin.word_un.set()
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ',
                                 reply_markup=remove_keyboard)

        @dp.message_handler(state=FSMAdmin.word_un)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['word_un'] = message.text
            await FSMAdmin.word_ru.set()
            await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥')

        @dp.message_handler(state=FSMAdmin.word_ru)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['word_ru'] = message.text
                text = f"{data['word_un']}-{data['word_ru']}"
                print(data['telegram_id'])
                await sync_to_async(ActionWord(telegram_id=data['telegram_id'],
                                               text=text).save)()
            markup = get_standard_markup()
            await FSMAdmin.action.set()
            await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Å–ª–æ–≤–æ –∑–∞–ø–∏—Å–∞–Ω–æ.\n–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=markup)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        @dp.message_handler(lambda message: message.text == "–ù–æ–≤—ã–π —É—Ä–æ–∫", state=FSMAdmin.action)
        async def handle_text(message: types.Message):
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            remove_keyboard = types.ReplyKeyboardRemove()
            await FSMAdmin.lesson_date.set()
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞',
                                 reply_markup=remove_keyboard)

        @dp.message_handler(state=FSMAdmin.lesson_date)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['lesson_date'] = message.text
            await FSMAdmin.lesson_topic.set()
            await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–º—É —É—Ä–æ–∫–∞')

        @dp.message_handler(state=FSMAdmin.lesson_topic)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['lesson_topic'] = message.text
            markup = get_mark_markup()
            await FSMAdmin.lesson_mark.set()
            await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∫–∞ —É—Ä–æ–∫–∞ –ø–æ 5-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ',
                                 reply_markup=markup)

        @dp.message_handler(state=FSMAdmin.lesson_mark)
        async def handle_text(message: types.Message, state: FSMContext):
            if message.text in ["1", "2", "3", "4", "5"]:
                async with state.proxy() as data:
                    data['lesson_mark'] = message.text
                    await sync_to_async(ActionLesson(telegram_id=data['telegram_id'],
                                                     date=data['lesson_date'],
                                                     topic=data['lesson_topic'],
                                                     mark=int(data['lesson_mark'])).save)()
                markup = get_standard_markup()
                await FSMAdmin.action.set()
                await message.answer(text='–£—Ä–æ–∫ –∑–∞–ø–∏—Å–∞–Ω.\n–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=markup)
            else:
                await message.reply(
                    text="–°–æ—Ä—Ä–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n–ö–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–ª–µ–≤–∞ –æ—Ç –∑–Ω–∞—á–∫–∞ üé§")

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        @dp.message_handler(lambda message: message.text == "–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", state=FSMAdmin.action)
        async def handle_text(message: types.Message):
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            remove_keyboard = types.ReplyKeyboardRemove()
            await FSMAdmin.material_name.set()
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
                                 reply_markup=remove_keyboard)

        @dp.message_handler(state=FSMAdmin.material_name)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['material_name'] = message.text
            await FSMAdmin.material_url.set()
            await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å—Å—ã–ª–∫—É')

        @dp.message_handler(state=FSMAdmin.material_url)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['material_url'] = message.text
            markup = get_mark_markup()
            await FSMAdmin.material_mark.set()
            await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ 5-—Ç–∏ –±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ',
                                 reply_markup=markup)

        @dp.message_handler(state=FSMAdmin.material_mark)
        async def handle_text(message: types.Message, state: FSMContext):
            if message.text in ["1", "2", "3", "4", "5"]:
                async with state.proxy() as data:
                    data['material_mark'] = message.text
                    await sync_to_async(ActionMaterial(telegram_id=data['telegram_id'],
                                                       topic=data['material_name'],
                                                       url=data['material_url'],
                                                       mark=int(data['material_mark'])).save)()
                markup = get_standard_markup()
                await FSMAdmin.action.set()
                await message.answer(text='–ú–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–ø–∏—Å–∞–Ω.\n–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=markup)
            else:
                await message.reply(
                    text="–°–æ—Ä—Ä–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n–ö–Ω–æ–ø–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–ª–µ–≤–∞ –æ—Ç –∑–Ω–∞—á–∫–∞ üé§")

        # –í—ã–≤–æ–¥ –°–ª–æ–≤
        @dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞", state=FSMAdmin.action)
        async def handle_text(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                async for Words in ActionWord.objects.filter(telegram_id=data['telegram_id']):
                    word_text = Words.text
                    await message.answer(f'{word_text}')
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            markup = get_standard_markup()
            await FSMAdmin.action.set()
            await message.answer(text='–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                                 reply_markup=markup)

        # –í—ã–≤–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        @dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", state=FSMAdmin.action)
        async def handle_text(message: types.Message, state: FSMContext):
            item = 0
            async with state.proxy() as data:
                async for Materials in ActionMaterial.objects.filter(telegram_id=data['telegram_id']):
                    item += 1
                    material_topic = Materials.topic
                    material_url = Materials.url
                    material_mark = Materials.mark
                    await message.answer(f'{item}){material_topic}.\nURL:{material_url}\n–û–¶–ï–ù–ö–ê:{material_mark}')
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            markup = get_standard_markup()
            await FSMAdmin.action.set()
            await message.answer(text='–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                                 reply_markup=markup)

        # –í—ã–≤–æ–¥ —É—Ä–æ–∫–æ–≤
        @dp.message_handler(lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏", state=FSMAdmin.action)
        async def handle_text(message: types.Message, state: FSMContext):
            item = 0
            async with state.proxy() as data:
                async for Lessons in ActionLesson.objects.filter(telegram_id=data['telegram_id']):
                    item += 1
                    lesson_topic = Lessons.topic
                    lesson_date = Lessons.date
                    lesson_mark = Lessons.mark
                    await message.answer(f'{item}){lesson_topic}.\n–î–ê–¢–ê –£–†–û–ö–ê:{lesson_date}\n–û–¶–ï–ù–ö–ê:{lesson_mark}')
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            markup = get_standard_markup()
            await FSMAdmin.action.set()
            await message.answer(text='–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                                 reply_markup=markup)

        # –í—ã–≤–æ–¥ —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —Å–ª–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ
        @dp.message_handler(lambda message: message.text == "–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ", state=FSMAdmin.action)
        async def handle_text(message: types.Message, state: FSMContext):
            # –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
            async with state.proxy() as data:
                res = await sync_to_async(ActionWord.objects.filter(telegram_id=data['telegram_id']).count)()
            markup = get_standard_markup()
            await message.answer(f'–í—Å–µ–≥–æ —Å–ª–æ–≤: {res}')
            await FSMAdmin.action.set()
            await message.answer(text='–í—ã–±–∏—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å',
                                 reply_markup=markup)
        # –ó–∞–ø—É—Å–∫ –ø—É–ª–ª–µ—Ä–∞
        executor.start_polling(dp, skip_updates=True)
